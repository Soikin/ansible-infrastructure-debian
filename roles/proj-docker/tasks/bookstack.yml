---
- name: bookstack | Create a directories for bookstack it does not exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: toolset
    group: toolset
    mode: '0755'
  with_items:
    - /h/toolset/bookstack
    - /h/toolset/bookstack/db-data
    - /h/toolset/bookstack/app-data

- name: bookstack | Create a bookstack network.
  docker_network:
    name: bookstack_default
  ignore_errors: "{{ ansible_check_mode }}"

- name: bookstack | Create a bookstack_db container.
  docker_container:
    name: bookstack_db
    image: mysql:5
    networks:
      - name: "bookstack_default"
    env:
      MYSQL_ROOT_PASSWORD: "{{ docker_rit.bookstack_db.root_password }}"
      TZ: Europe/Minsk
      MYSQL_DATABASE: "{{ docker_rit.bookstack_db.database }}"
      MYSQL_USER: "{{ docker_rit.bookstack_db.user }}"
      MYSQL_PASSWORD: "{{ docker_rit.bookstack_db.password }}"
    volumes:
      - /h/toolset/bookstack/db-data:/var/lib/mysql
    restart_policy: unless-stopped
  ignore_errors: "{{ ansible_check_mode }}"

- name: bookstack | Copying files to build an image.
  copy:
    src: "bookstack/{{ item }}"
    dest: /h/toolset/bookstack/
    owner: toolset
    group: toolset
    mode: 0644
  with_items:
    - Dockerfile
    - varb-ca.crt

- name: bookstack | Build an bookstack image.
  docker_image:
    build:
      path: /h/toolset/bookstack/
    name: bookstack
    tag: v1
    source: build
  ignore_errors: "{{ ansible_check_mode }}"

- name: bookstack | Create a bookstack container.
  docker_container:
    name: bookstack
    image: bookstack:v1
    networks:
      - name: "bookstack_default"
      - name: "default_network"
    env:
      PUID: "1000"
      PGID: "1000"
      DB_HOST: "{{ docker_rit.bookstack_db.host }}"
      DB_DATABASE: "{{ docker_rit.bookstack_db.database }}"
      DB_USER: "{{ docker_rit.bookstack_db.user }}"
      DB_PASS: "{{ docker_rit.bookstack_db.password }}"
      APP_URL: "{{ docker_rit.bookstack.url }}"
    volumes:
      - /h/toolset/bookstack/app-data:/config
    restart_policy: unless-stopped
  ignore_errors: "{{ ansible_check_mode }}"

- name: bookstack | Copy tls certificates.
  copy:
    src: "bookstack/nginx/tls/{{ item.src }}"
    dest: /h/toolset/nginx/tls/
    owner: toolset
    group: toolset
    mode: "{{ item.mode }}"
  with_items:
    - { src: "bookstack.rit.crt", mode: "0644" }
    - { src: "bookstack.rit.key", mode: "0600" }

- name: bookstack | Copy nginx server configs.
  copy:
    src: bookstack/nginx/conf.d/bookstack.conf
    dest: /h/toolset/nginx/conf.d/
    owner: toolset
    group: toolset
    mode: 0644
  notify: reload nginx
